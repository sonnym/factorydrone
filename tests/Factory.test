<?php
module_load_include('inc', 'phactorydrone', 'tests/PhactoryDroneTestCase');

class FactoryTest extends PhactoryDroneTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Factory unit tests',
      'description' => 'Test the methods on the Factory class',
      'group' => 'Phactory Drone',
    );
  }

  public function testFactoryCanCreateSequenceCallbacks() {
    $sequence = Factory::sequence(function ($n) { return $n; });
    $this->assertEqual(0, $sequence());
    $this->assertEqual(1, $sequence());
    $this->assertEqual(2, $sequence());
  }

  public function testFactorySequenceInterpolates() {
    $sequence = Factory::sequence(function ($n) { return "sequence {$n}"; });
    $this->assertEqual('sequence 0', $sequence());
  }

  public function testFactoryThrowsWhenAddingFileToFactoryPaths() {
    $this->assertThrows('$path must be a directory.', function () {
      Factory::add_factory_path(__FILE__);
    });
  }

  public function testFactoryCanLoadDefinitions() {
    $this->load_factory_definitions();
    $definitions = Factory::get_definitions();

    foreach ($definitions as $definition) {
      $this->assert(isset($definition['type']));
      $this->assert(isset($definition['opts']));
    }
  }

  public function testCanGetDefaultOptionsForAGivenFactory() {
    $default_options = Factory::get_default_options('factory');
    $this->assert(is_array($default_options));
    $this->assertEqual($default_options['foo'], 'bar');
    $this->assertEqual($default_options['sequence'], 'sequence 0');
  }

  public function testFactoryThrowsWhenAttemptingToAccessNonexistentFactory() {
    $this->assertThrows('There is no factory definition called nonexistent.', function() {
      Factory::get_default_options('nonexistent');
    });
  }
}
