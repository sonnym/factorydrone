<?php
module_load_include('inc', 'phactorydrone', 'tests/PhactoryDroneTestCase');

class PhactoryDroneTest extends PhactoryDroneTestCase {
  public static function getInfo() {
    return array(
      'name' => 'PhactoryDrone unit tests',
      'description' => 'Test the methods on the PhactoryDrone class',
      'group' => 'Phactory Drone',
    );
  }

  public function testPhactoryDroneCanCreateSequenceCallbacks() {
    $sequence = PhactoryDrone::sequence(function ($n) { return $n; });
    $this->assertEqual(0, $sequence());
    $this->assertEqual(1, $sequence());
    $this->assertEqual(2, $sequence());
  }

  public function testPhactoryDroneSequenceInterpolates() {
    $sequence = PhactoryDrone::sequence(function ($n) { return "sequence {$n}"; });
    $this->assertEqual('sequence 0', $sequence());
  }

  public function testPhactoryDroneThrowsWhenAddingFileToPhactoryDronePaths() {
    $this->assertThrows('$path must be a directory.', function () {
      PhactoryDrone::add_factory_path(__FILE__);
    });
  }

  public function testPhactoryDroneCanLoadDefinitions() {
    $this->load_factory_definitions();
    $definitions = PhactoryDrone::get_definitions();

    foreach ($definitions as $definition) {
      $this->assert(isset($definition['type']));
      $this->assert(isset($definition['opts']));
    }
  }

  public function testCanGetDefaultOptionsForAGivenPhactoryDrone() {
    $default_options = PhactoryDrone::get_default_options('factory');
    $this->assert(is_array($default_options));
    $this->assertEqual($default_options['foo'], 'bar');
    $this->assertEqual($default_options['sequence'], 'sequence 0');
  }

  public function testGetTypeForAGivenFactory() {
    $type = PhactoryDrone::get_type('factory');
    $this->assertEqual($type, '');

    $type = PhactoryDrone::get_type('content type');
    $this->assertEqual($type, 'content type');
  }

  public function testPhactoryDroneThrowsWhenAttemptingToAccessNonexistentPhactoryDrone() {
    $this->assertThrows('There is no factory definition called nonexistent.', function() {
      PhactoryDrone::get_default_options('nonexistent');
    });
  }

  public function testPhactoryDroneThrowsWhenAttemptingToCreateAnUnknownType() {
    $this->assertThrows("Factories of type 'undefined type' are not supported.", function() {
      PhactoryDrone::create('undefined type');
    });
  }
}
